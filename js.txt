document.addEventListener('DOMContentLoaded', () => {
    const taskInput = document.getElementById('new-task');
    const addTaskBtn = document.getElementById('add-task-btn');
    const taskList = document.getElementById('task-list');
    const filterButtons = document.querySelectorAll('.filter-btn');
    let tasks = [];

    // Function to render tasks based on the filter
    const renderTasks = (filter = 'all') => {
        taskList.innerHTML = ''; // Clear the task list before rendering

        tasks
            .filter(task => {
                if (filter === 'completed') return task.completed;
                if (filter === 'pending') return !task.completed;
                return true; // If filter is 'all', return all tasks
            })
            .forEach((task, index) => {
                const taskItem = document.createElement('li');
                taskItem.classList.add('task-item');
                if (task.completed) taskItem.classList.add('completed');

                taskItem.innerHTML = `
                    <span>${task.text}</span>
                    <div class="task-actions">
                        <button class="complete-btn">${task.completed ? 'Undo' : 'Complete'}</button>
                        <button class="edit-btn">Edit</button>
                        <button class="delete-btn">Delete</button>
                    </div>
                `;

                // Append the task item to the task list
                taskList.appendChild(taskItem);

                // Complete task functionality
                taskItem.querySelector('.complete-btn').addEventListener('click', () => {
                    task.completed = !task.completed; // Toggle the completion status
                    renderTasks(filter); // Re-render the tasks based on the current filter
                });

                // Edit task functionality
                taskItem.querySelector('.edit-btn').addEventListener('click', () => {
                    const newTaskText = prompt('Edit task', task.text);
                    if (newTaskText !== null && newTaskText.trim() !== '') {
                        task.text = newTaskText.trim(); // Update the task text
                        renderTasks(filter); // Re-render the tasks based on the current filter
                    }
                });

                // Delete task functionality
                taskItem.querySelector('.delete-btn').addEventListener('click', () => {
                    tasks.splice(index, 1); // Remove the task from the array
                    renderTasks(filter); // Re-render the tasks based on the current filter
                });
            });
    };

    // Add task functionality
    addTaskBtn.addEventListener('click', () => {
        const taskText = taskInput.value.trim();
        if (taskText !== '') {
            tasks.push({ text: taskText, completed: false }); // Add new task to the tasks array
            taskInput.value = ''; // Clear the input field
            renderTasks(); // Render all tasks (default filter is 'all')
        }
    });

    // Filter tasks functionality
    filterButtons.forEach(btn => {
        btn.addEventListener('click', () => {
            filterButtons.forEach(b => b.classList.remove('active')); // Remove active class from all buttons
            btn.classList.add('active'); // Add active class to the clicked button
            renderTasks(btn.dataset.filter); // Render tasks based on the selected filter
        });
    });

    // Initial rendering of all tasks
    renderTasks();
});